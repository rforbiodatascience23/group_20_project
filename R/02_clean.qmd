---
title: "Clean and join data"
format: html
editor: visual
---

## Load libraries

```{r}
#| label: Load libraries
library(tidyverse)
```

## Load data

```{r}
#| label: Load data

# Loading data
data_function <- read_delim(file = "../data/_raw/function_file.tsv.gz", delim = "\t")
data_sequence <- read_delim(file = "../data/_raw/sequence_file.tsv.gz", delim = "\t")
```

## Join data

```{r}
#| label: Join Data

# Tidying data: joining data
joined_data <- data_function |>
  select(Entry, setdiff(colnames(data_function), colnames(data_sequence))) |>
  full_join(data_sequence,
            by = "Entry")
```

```{r}
#| label: Clean data

# Finding col_names in data_sequence but not in data_function. These Jeppe are responsible for cleaning
setdiff(colnames(data_sequence), colnames(data_function))

# Changing space in column names to "_"
colnames(joined_data) <- gsub(" ", "_", colnames(joined_data))
colnames(joined_data) <- str_to_lower(colnames(joined_data))



# Tidying data: Tidying "active site" column
joined_data <- joined_data |>
  mutate(active_site = str_extract_all(active_site, "(?<=ACT_SITE )\\d+")) |>
  mutate(active_site = sapply(active_site, function(x) paste(x, collapse = ","))) |>
  separate_longer_delim(col = active_site, ",")

# Tidying data: Tidying "binding site" column
joined_data <- joined_data |>
  mutate(binding_site_pos = str_extract_all(binding_site, "(?<=BINDING\\s)\\d+(\\.\\.\\d+)?"))

joined_data <- joined_data |>
  seperate_wider_delim(Binding_site, )
  (Binding_site, "(?<=BINDING\\s)\\d+(\\.\\.\\d+)?"))
```

# Clean function data

```{r}

###
# Tidy pathway 
###
joined_data <- joined_data |>
  # Remove unwanted patterns (step is removed since it is a small minority that has this noted)
  mutate(pathway = str_remove_all(pathway, "^PATHWAY: "),
         pathway = str_remove_all(pathway, "\\{.*?\\}"),
         pathway = str_remove_all(pathway, ": step \\d+/\\d+"),
         pathway = str_remove_all(pathway, "\\.")) |>
  # Split into longer form
  separate_longer_delim(col = pathway, delim = ";")

###
# Tidy subcellular_location_[cc]
###
joined_data <- joined_data |>
  # Remove header and Notes
  mutate(`subcellular_location_[cc]` = str_remove(`subcellular_location_[cc]`, "Note=.*"),
         `subcellular_location_[cc]` = str_remove_all(`subcellular_location_[cc]`, "SUBCELLULAR LOCATION: "),
         `subcellular_location_[cc]` = str_remove_all(`subcellular_location_[cc]`, "\\{.*?\\}"),
         `subcellular_location_[cc]` = str_remove_all(`subcellular_location_[cc]`, "\\[.*?\\]")) |>
  # Use delimiter to make data longer (there are several for cofactors)
  separate_longer_delim(col = `subcellular_location_[cc]`, delim = ";") |>
  separate_longer_delim(col = `subcellular_location_[cc]`, delim = ". ") |>
  separate_longer_delim(col = `subcellular_location_[cc]`, delim = ",") |>
  # Remove '.' ':' and whitespace that is inserted in a few entries
  mutate(`subcellular_location_[cc]` = str_remove(`subcellular_location_[cc]`, "\\."), 
         `subcellular_location_[cc]` = str_remove(`subcellular_location_[cc]`, "\\: "),
         `subcellular_location_[cc]` = str_remove(`subcellular_location_[cc]`, "^ "))

####
# Tidy cofactor
####
joined_data <- joined_data |>
  # Remove header in row, Xref, evidence and Notes
  mutate(cofactor = str_remove_all(cofactor, "COFACTOR: "),
         cofactor = str_remove_all(cofactor, "\\s*Xref\\s*=.*?;"),
         cofactor = str_remove_all(cofactor, ";\\s*Evidence=\\{.*?\\}"),
         cofactor = str_remove(cofactor, "Note=.*")) |>
  # Use delimiter to make data longer
  separate_longer_delim(col = cofactor, delim = ";") |>
  # Remove 'Name='
  mutate(cofactor = str_remove(cofactor, "Name=")) 

####
# Tidy protein_families 
####
joined_data <- joined_data |>
  # Use delimiter to make data longer
  separate_longer_delim(protein_families, delim = ",")|>
  # Extract family type and make new column to put data in + remove from colum
  mutate(family_type = str_extract(protein_families, 
                                    pattern = "\\S*family\\b", group = NULL),
         `Protein families` = str_remove(protein_families, 
                                         pattern = "\\S*family\\b")) |>
  # Rename column as there is only one protein family in each row now
  rename(protein_family = protein_families )
  

####
#Tidy gene_ontology_(molecular_function)
####
joined_data <- joined_data |>
  # Remove GO numbers
  mutate(`gene_ontology_(molecular_function)` = str_remove_all(`gene_ontology_(molecular_function)`, "\\[.*?\\]"))|>
  # Use delimiter to make data longer
  separate_longer_delim(`gene_ontology_(molecular_function)`, delim = ";")

####
# Tidy ec (we have decided only to work with the first digit but we are aware that the others have information aswell)
####
enzyme_class <- c("oxidoreductases", "transferases", "hydrolases", "lysases", "isomerases", "ligases", "translocases")

joined_data <- joined_data |>
  # Extract the first digit and create new column
  mutate(first_digit = str_extract(ec_number, "^\\d"),
         # Translate digit to enzyme class using vector 
         enzyme_class = enzyme_class[as.numeric(first_digit)])|>
  select(-first_digit, -ec_number)
  
####
# Only keep the first gene name
####
joined_data <- joined_data |>
  mutate(gene_name = str_extract(gene_names, "^\\S*"))|>
  # Remove gene names column
  select(-gene_names)

# Correct empty columns if any non registered NA's are created by deleting text elements
joined_data <- joined_data |>
  mutate_all(~ ifelse(. == "", NA, .))|>
  # Check we dont have any duplicate entries
  distinct()


#data|>
#  select(`Temperature dependence`, Organism)|>
#  drop_na()
  
#data|>
#  select(Intramembrane, Organism, Pathway)|>
#  drop_na()

# Drop all unwanted cols
joined_data <- joined_data |>
  select(-reviewed,-`function_[cc]`,
         -temperature_dependence,
         -protein_names,
         -intramembrane,
         -catalytic_activity,
         -entry_name)

```
